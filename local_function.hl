#ifndef MATRIX_PRIVATE_HL
# define MATRIX_PRIVATE_HL

#include "matrix.hl"

t_vector		local_matrix_get_mult_dir_vector(__local t_matrix *m, const t_vector *v);
t_vector		local_matrix_get_mult_vector(__local t_matrix *m, const t_vector *v);
t_vector		vector_get_sub_local(const t_vector *a, __local t_vector *b);
void			local_vector_scale(t_vector *a, __local t_vector *b);
t_vector		local_vector_get_sub(__local t_vector *a, const t_vector *b);
t_vector	local_vector_get_cross_product_local(__local t_vector *a, __local t_vector *b);
t_vector	vector_get_rotate_local(const t_vector *this, __local t_vector *rot);
t_vector	vector_get_inverse_rotate_local(const t_vector *this, __local t_vector *rot);

t_vector		local_matrix_get_mult_vector(__local t_matrix *m, const t_vector *v)
{
	t_vector	new;
	float		len;

	new.x = (m->matrix[0][0] * v->x) + (m->matrix[0][1] * v->y) + (m->matrix[0][2] * v->z) + (m->matrix[0][3]);
	new.y = (m->matrix[1][0] * v->x) + (m->matrix[1][1] * v->y) + (m->matrix[1][2] * v->z) + (m->matrix[1][3]);
	new.z = (m->matrix[2][0] * v->x) + (m->matrix[2][1] * v->y) + (m->matrix[2][2] * v->z) + (m->matrix[2][3]);
	len =   (m->matrix[3][0] * v->x) + (m->matrix[3][1] * v->y) + (m->matrix[3][2] * v->z) + (m->matrix[3][3]);

	new.x /= len;
	new.y /= len;
	new.z /= len;

	return (new);
}

t_vector		local_matrix_get_mult_dir_vector(__local t_matrix *m, const t_vector *v)
{
	t_vector	n;

	n.x = (v->x * m->matrix[0][0]) + (v->y * m->matrix[0][1]) + (v->z * m->matrix[0][2]);
	n.y = (v->x * m->matrix[1][0]) + (v->y * m->matrix[1][1]) + (v->z * m->matrix[1][2]);
	n.z = (v->x * m->matrix[2][0]) + (v->y * m->matrix[2][1]) + (v->z * m->matrix[2][2]);

	return (n);
}

t_vector		vector_get_sub_local(const t_vector *a, __local t_vector *b)
{
	t_vector new;

	new.x = a->x - b->x;
	new.y = a->y - b->y;
	new.z = a->z - b->z;

	return (new);
}

t_vector		local_vector_get_sub(__local t_vector *a, const t_vector *b)
{
	t_vector new;

	new.x = a->x - b->x;
	new.y = a->y - b->y;
	new.z = a->z - b->z;

	return (new);
}

t_vector		vector_get_add_local(const t_vector *a, __local t_vector *b)
{
	t_vector new;

	new.x = a->x + b->x;
	new.y = a->y + b->y;
	new.z = a->z + b->z;

	return (new);
}

void		local_vector_scale(t_vector *a, __local t_vector *b)
{
	a->x *= b->x;
	a->y *= b->y;
	a->z *= b->z;

	return ;
}

t_vector	local_vector_get_cross_product_local(__local t_vector *a, __local t_vector *b)
{
	t_vector new;

	new.x = (a->y * b->z) - (a->z * b->y);
	new.y = (a->z * b->x) - (a->x * b->z);
	new.z = (a->x * b->y) - (a->y * b->x);
	return (new);
}

t_vector	vector_get_rotate_local(const t_vector *this, __local t_vector *rot)
{
	t_vector n;

	n = *this;
	if (rot->x)
		vector_rotate_x(&n, rot->x);
	if (rot->y)
		vector_rotate_y(&n, rot->y);
	if (rot->z)
		vector_rotate_z(&n, rot->z);
	return (n);
}

t_vector	vector_get_inverse_rotate_local(const t_vector *this, __local t_vector *rot)
{
	t_vector n;

	n = *this;

	if (-rot->z)
		vector_rotate_z(&n, -rot->z);
	if (-rot->y)
		vector_rotate_y(&n, -rot->y);
	if (-rot->x)
		vector_rotate_x(&n, -rot->x);
	return (n);
}

#endif
