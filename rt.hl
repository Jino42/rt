
#ifndef RT_H
# define RT_H

# define EPSILON 0.000005f

# define F_CPU (1 << 1)
# define F_DEBUG (1 << 2)
# define F_DEBUG_CL (1 << 3)
# define F_DEBUG_SIZE_STRUCT (1 << 4)

typedef unsigned char uint8_t;
typedef unsigned int uint32_t;
typedef unsigned long uint64_t;
typedef int int32_t;

# define HEIGHT 720
# define WIDTH 1280
# define SIZE_RENDER (HEIGHT * WIDTH * 4)

# define NB_THREAD 4

# define OBJ_SPHERE 0
# define OBJ_PLANE 1
# define OBJ_CYLINDER 2
# define OBJ_PARABOLOID 3
# define OBJ_PARABOLOID_HYPERBOLIC 4
# define OBJ_ELLIPSOID 5
# define OBJ_CONE 6

typedef struct	s_ptr_cl
{
	float		invH;
	float		invW;
	float		ratio;
	float		scale;
	float		fov;
}				t_ptr_cl;

typedef struct	s_cam
{
	t_vector	position;
	t_vector	angle;
	t_matrix	camera_to_world;
}				t_cam;

///////////////////////////////////////////////////

typedef struct	s_light
{
	t_matrix	light_to_world;
	t_vector	position;
	float		intensity;
	uint32_t	color;
}				t_light;

typedef struct	s_ray_ret
{
	t_vector	y_axis;

	float		t;

	float		m;

	float		inter0;
	float		inter1;
	t_vector	hit_point;
	t_vector	hit_normal;
	t_vector	position_obj_to_hit;
}				t_ray_ret;

typedef struct	s_obj
{
	uint64_t	mem_size_obj;
	float		(*intersect)(void *, const t_vector *,
						const t_vector *, const float);
int voider;
	uint8_t		id;
	uint32_t	color;
	t_vector	position;
	t_matrix	world_to_object;
	t_matrix	translation;
	float		rotate_speed;
	float		speed;
	t_vector	rot;

	t_vector	hit_point;
	t_vector	hit_normal;
}				t_obj;

typedef struct 	s_sphere
{
	uint64_t	mem_size_obj;
	float		(*intersect)(struct s_sphere *, const t_vector *,
						const t_vector *, const float);
int voider;
	uint8_t		id;
	uint32_t	color;

	t_vector	position;
	t_matrix	world_to_object;
	t_matrix	translation;
	float		rotate_speed;
	float		speed;
	t_vector	rot;

	t_vector	hit_point;
	t_vector	hit_normal;

	float		radius;
	float		radius2;
}				t_sphere;

typedef struct 	s_ellipsoid
{
	uint64_t	mem_size_obj;
	float		(*intersect)(struct s_ellipsoid *, const t_vector *,
						const t_vector *, const float);
int voider;
	uint8_t		id;
	uint32_t	color;

	t_vector	position;
	t_matrix	world_to_object;
	t_matrix	translation;
	float		rotate_speed;
	float		speed;
	t_vector	rot;

	t_vector	hit_point;
	t_vector	hit_normal;

	t_vector	size;
	float		radius;
	float		radius2;
}				t_ellipsoid;

typedef struct 	s_cone
{
	uint64_t	mem_size_obj;
	float		(*intersect)(struct s_cone *, const t_vector *,
						const t_vector *, const float);
int voider;
	uint8_t		id;
	uint32_t	color;

	t_vector	position;
	t_matrix	world_to_object;
	t_matrix	translation;
	float		rotate_speed;
	float		speed;
	t_vector	rot;

	t_vector	hit_point;
	t_vector	hit_normal;

	float		radius;
	float		radius2;
}				t_cone;

typedef struct	s_paraboloid
{
	uint64_t	mem_size_obj;
	float		(*intersect)(struct s_paraboloid *, const t_vector *,
						const t_vector *, const float);
int voider;
	uint8_t		id;
	uint32_t	color;
	t_vector	position;
	t_matrix	world_to_object;
	t_matrix	translation;
	float		rotate_speed;
	float		speed;
	t_vector	rot;

	t_vector	hit_point;
	t_vector	hit_normal;

	float		radius;
	float		radius2;
}				t_paraboloid;

typedef struct	s_paraboloid_hyperbolic
{
	uint64_t	mem_size_obj;
	float		(*intersect)(struct s_paraboloid_hyperbolic *, const t_vector *,
						const t_vector *, const float);
int voider;
	uint8_t		id;
	uint32_t	color;
	t_vector	position;
	t_matrix	world_to_object;
	t_matrix	translation;
	float		rotate_speed;
	float		speed;
	t_vector	rot;

	t_vector	hit_point;
	t_vector	hit_normal;

	float		radius;
	float		radius2;
}				t_paraboloid_hyperbolic;

typedef struct	s_plan
{
	uint64_t	mem_size_obj;
	float		(*intersect)(struct s_plan *, const t_vector *,
						const t_vector *, const float);
int voider;
	uint8_t		id;
	uint32_t	color;
	t_vector	position;
	t_matrix	world_to_object;
	t_matrix	translation;
	float		rotate_speed;
	float		speed;
	t_vector	rot;

	t_vector	hit_point;
	t_vector	hit_normal;

	t_vector	p0; // Bas gauche
	t_vector	p1; // haut gauche RELATIVE
	t_vector	p2; // bas droite RELATIVE
	float		len;
}				t_plan;

typedef struct	s_cylinder
{
	uint64_t	mem_size_obj;
	float		(*intersect)(struct s_cylinder *, const t_vector *,
						const t_vector *, const float);

int voider;
	uint8_t		id;
	uint32_t	color;
	t_vector	position;
	t_matrix	world_to_object;
	t_matrix	translation;
	float		rotate_speed;
	float		speed;
	t_vector	rot;

	t_vector	hit_point;
	t_vector	hit_normal;

	float		radius;
	float		radius2;
}				t_cylinder;

#endif
